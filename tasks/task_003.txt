# Task ID: 3
# Title: Develop Position Creation and Management with Security Controls
# Status: pending
# Dependencies: 4
# Priority: high
# Description: Build the comprehensive job creation interface for recruiters, including all required fields and position lifecycle management, with appropriate security measures and audit logging.
# Details:
Create a position creation form with the following structured sections:

Basic Details:
- Customer* (dropdown from client list) (required)
- Title* (dropdown) (required)
- Position Code
- Start Date* (required)
- Show on Job Portal* (Yes/No) (required)
- Client Manager (auto-fill from client)
- Sales Manager (auto-fill from client)
- Position #
- Description* (textarea) (required)

Address Details:
- Auto-fill from client
- Street Address* (required)
- City* (required)
- Province* (required)
- Postal Code* (required)

Employment Categorization:
- Employment Term* (Permanent/Contract/Temporary) (required)
- Employment Type* (Full-Time/Part-Time) (required)
- Position Category* (Admin/AZ/Amazon Driver/Cartage/DZ/Forklifter/General Labour/GZ/Perm Placements/Technician) (required)
- Experience* (0-6 Months to 5+ Years) (required)

Documents Required:
- Multiple checkboxes for:
  - License
  - Driver Abstract
  - TDG Certificate
  - SIN
  - Immigration Status
  - Passport
  - CVOR
  - Resume
  - Articles of Incorporation
  - Direct Deposit
- At least one document must be selected (required)

Position Details:
- Payrate Type* (Hourly/Daily/Monthly) (required)
- No. of Positions* (required)
- Regular Pay Rate* (required)
- Markup%
- Bill Rate* (required)

Overtime:
- Enable toggle
- Hours threshold
- Bill Rate
- Pay Rate

Payment & Billings:
- Preferred Payment Method* (Cash/Cheque/Direct Deposit/e-Transfer/Corporation) (required)
- Terms* (Due on Receipt/Net options) (required)

Notes:
- Notes* (textarea) (required)
- Task
- Assigned To (dropdown)
- Proj. Comp. Date
- Time

Implement position lifecycle management with status tracking (open, filled, closed, on-hold). Add editing and duplication capabilities for positions. Include bulk actions for position management. Use React Hook Form with Zod for validation and Supabase for data storage.

Additional requirements:
- Validate all required fields (marked with *)
- Implement client data auto-fill functionality when a customer is selected
- Calculate bill rate based on pay rate and markup percentage where applicable
- Add draft saving capability

Security Considerations:
- Implement proper access controls to ensure only authorized recruiters can create/edit positions
- Create comprehensive audit logs for all position operations
- Ensure sensitive compensation information is properly encrypted
- Implement input validation to prevent injection attacks
- Add rate limiting for position creation/editing APIs
- Follow the security guidelines from task 11 for data handling

# Test Strategy:
Validate that all required fields are properly enforced, especially the mandatory client association and document selection. Test the position lifecycle state transitions. Verify editing functionality preserves existing data. Test position duplication and bulk actions. Ensure the UI follows the established design patterns.

Specific test cases:
- Verify auto-fill functionality when a customer is selected
- Test calculation of bill rate based on pay rate and markup percentage
- Verify that at least one document must be selected
- Test draft saving capability
- Test all required field validations
- Test the overtime toggle and related fields

Security testing:
- Test access controls to verify only authorized users can create/edit positions
- Verify audit logs are created for all position operations
- Test encryption/decryption of sensitive compensation data
- Test for common security vulnerabilities including XSS and CSRF attacks
- Verify rate limiting functionality

# Subtasks:
## 1. Create database schema and API endpoints for position management [pending]
### Dependencies: None
### Description: Design and implement the database schema for positions with all required fields and relationships. Create the necessary API endpoints for CRUD operations.
### Details:
Create Supabase tables for positions with appropriate relationships to clients, users, and documents. Include all fields from the requirements (basic details, address, employment categorization, documents, position details, overtime, payment & billing, notes). Implement RLS policies for security. Create API endpoints for creating, reading, updating, and deleting positions. Implement proper error handling and input validation. Ensure sensitive fields like compensation data are properly encrypted. Set up rate limiting for position-related API endpoints.

## 2. Implement position form UI with React Hook Form and Zod validation [pending]
### Dependencies: 3.1
### Description: Build the multi-section position creation form UI with all required fields and client-side validation using React Hook Form and Zod.
### Details:
Create a multi-step form with all sections from requirements (Basic Details, Address Details, Employment Categorization, Documents Required, Position Details, Overtime, Payment & Billings, Notes). Implement Zod schemas for validation of all required fields. Add conditional logic for field dependencies (e.g., overtime toggle showing/hiding related fields). Create reusable form components for each section. Implement draft saving functionality to allow users to save incomplete forms. Add form state management to handle the large number of fields efficiently.

## 3. Develop client data auto-fill and dynamic calculations [pending]
### Dependencies: 3.2
### Description: Implement functionality to auto-fill client data when a customer is selected and add dynamic calculations for bill rates based on pay rates and markup percentages.
### Details:
Create a client data fetching mechanism that triggers when a customer is selected from the dropdown. Auto-populate address fields, client manager, and sales manager based on client data. Implement real-time calculation of bill rates based on pay rates and markup percentages. Add event listeners for pay rate and markup changes to update bill rates automatically. Implement debouncing for calculations to prevent excessive re-renders. Add validation to ensure calculated values are within acceptable ranges.

## 4. Implement position lifecycle management and status tracking [pending]
### Dependencies: 3.1, 3.2
### Description: Create the position lifecycle management system with status tracking (open, filled, closed, on-hold) and implement position duplication functionality.
### Details:
Add status field to positions with appropriate states (open, filled, closed, on-hold). Create UI components for status changes with confirmation dialogs. Implement status change API endpoints with proper validation and authorization checks. Add position duplication functionality that creates a new position with data from an existing one but with a new ID and creation timestamp. Implement status-based filtering in the position list view. Create status change history tracking for audit purposes.

## 5. Develop bulk actions and position management interface [pending]
### Dependencies: 3.4
### Description: Create a position management dashboard with bulk action capabilities for efficient position management.
### Details:
Build a position management dashboard with sortable and filterable columns. Implement multi-select functionality for positions. Create bulk actions including status changes, deletion, duplication, and assignment changes. Add confirmation dialogs for destructive bulk actions. Implement pagination and search functionality for the position list. Create position detail view with all information displayed in a user-friendly format. Add quick-edit capabilities for common fields directly from the list view.

## 6. Implement comprehensive security controls and access management [pending]
### Dependencies: 3.1, 3.4
### Description: Add role-based access controls, input validation, and security measures to protect position data and operations.
### Details:
Implement role-based access controls to restrict position creation/editing to authorized recruiters only. Create middleware for validating user permissions before processing position-related requests. Add input sanitization to prevent XSS and injection attacks. Implement CSRF protection for all position form submissions. Create rate limiting for position API endpoints to prevent abuse. Add IP-based restrictions for sensitive operations. Ensure all client-side validation is duplicated on the server side. Follow security guidelines from task 11 for proper data handling and protection.

## 7. Create comprehensive audit logging and reporting system [pending]
### Dependencies: 3.1, 3.6
### Description: Implement detailed audit logging for all position operations and create reporting capabilities for position data.
### Details:
Create an audit logging system that records all position-related operations (creation, updates, status changes, deletions). Log user information, timestamp, IP address, and specific changes made for each operation. Implement a secure storage mechanism for audit logs with appropriate retention policies. Create an audit log viewer for administrators with filtering and search capabilities. Add reporting functionality for positions including status reports, time-to-fill metrics, and position distribution by category. Implement export capabilities for position data and audit logs in common formats (CSV, PDF). Ensure audit logs cannot be modified or deleted by regular users.

