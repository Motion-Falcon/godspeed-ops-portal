---
description: Activity logging implementation patterns for Express routes and UI components
globs: server/src/routes/*.ts, server/src/middleware/activityLogger.ts, client/src/components/dashboard/RecentActivities.tsx
alwaysApply: true
---

# **Activity Logging System Rules**

**All significant user operations MUST use the activity logging system.**

## **Core Pattern**

```typescript
import activityLogger from '../middleware/activityLogger.js';

router.post('/route',
  authenticateToken,
  activityLogger({
    onSuccess: (req, res) => ({
      actionType: 'action_name', // Must exist in ActivityData interface
      actionVerb: 'created/updated/deleted',
      primaryEntityType: 'entity_type',
      primaryEntityId: res.locals.entity?.id,
      primaryEntityName: res.locals.entity?.name || req.body.name,
      displayMessage: `${actorName} ${verb} ${entityName}`,
      category: 'user_management|client_management|candidate_management|position_management|financial',
      priority: 'normal'
    })
  }),
  async (req, res) => {
    // Handler logic
    res.locals.entity = createdEntity; // Store for logger
    res.json({ success: true });
  }
);
```

## **When Adding New Activity Types**

1. **Add to interface** in `activityLogger.ts`:
   ```typescript
   actionType: "existing_types" | "new_action_type"
   ```

2. **Update UI component** in `RecentActivities.tsx`:
   ```typescript
   action_type: "existing_types" | "new_action_type"
   ```

3. **Add status icon**:
   ```typescript
   case "new_action_type":
     return <Icon size={12} className="status-success" />;
   ```

4. **Add message formatting**:
   ```typescript
   case "new_action_type":
     return <ActorName>{actor_name}</ActorName> performed action;
   ```

## **Special Cases**

### **No Authentication (Registration)**
```typescript
// Create system user context
if (!req.user) {
  req.user = {
    id: '00000000-0000-0000-0000-000000000000',
    email: 'system@godspeedxp.com',
    user_metadata: { name: 'System', user_type: 'admin' }
  } as any;
}
```

### **Multiple Entity Relationships**
```typescript
// Primary: Main subject of action
primaryEntityType: 'jobseeker',
primaryEntityId: candidateId,
primaryEntityName: 'John Doe',

// Secondary: Related entity or actor
secondaryEntityType: 'position', 
secondaryEntityId: positionId,
secondaryEntityName: 'Senior Developer',

// Tertiary: Additional context (optional)
tertiaryEntityType: 'client',
tertiaryEntityId: clientId,
tertiaryEntityName: 'ACME Corp'

// Results in: "Assigned John Doe to Senior Developer position at ACME Corp"
```

### **Entity Relationship Examples**
```typescript
// User Management: Admin assigns manager to user
primaryEntity: 'user' (target user)
secondaryEntity: 'manager' (assigned manager)

// Invoicing: Create invoice for client 
primaryEntity: 'invoice' (invoice number)
secondaryEntity: 'client' (billing target)

// Position Assignment: Assign jobseeker to position at client
primaryEntity: 'jobseeker' (candidate)
secondaryEntity: 'position' (job role)
tertiaryEntity: 'client' (company)
```

## **Don't Do This**

- ❌ Skip activity logging for significant operations
- ❌ Use `logActivityDirect()` - not used in this codebase 
- ❌ Hardcode display messages - use dynamic context
- ❌ Forget to store data in `res.locals` for logger access
- ❌ Use invalid categories - stick to defined enum values

## **Categories**

- `user_management` - Registration, onboarding, roles
- `candidate_management` - Jobseeker operations  
- `position_management` - Position CRUD, assignments
- `client_management` - Client operations, drafts
- `financial` - Invoices, timesheets