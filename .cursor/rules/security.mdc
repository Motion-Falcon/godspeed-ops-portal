# Security Implementation Guidelines

## Encryption & PII Handling

- **AES-256 Encryption for Sensitive Data**
  - Use the encryption utility for all PII (Personally Identifiable Information)
  - Sensitive fields requiring encryption:
    - SIN (Social Insurance Number)
    - License numbers
    - Passport numbers
    - Business/HST/GST numbers
  
  ```javascript
  // ✅ DO: Encrypt sensitive data before storing
  const encryptedSIN = encryption.encrypt(userData.sinNumber);
  
  // ❌ DON'T: Store sensitive data in plaintext
  const plainSIN = userData.sinNumber;
  ```

## Audit Logging

- **Mandatory Audit Logging for All Sensitive Operations**
  - Always log user actions that involve sensitive data
  - Mask PII in logs using the AuditLogger utility
  - Required fields for audit logs:
    - User ID performing the action
    - Action type (e.g., 'profile_submit', 'profile_access')
    - Timestamp (automatically added)
    - Masked/redacted sensitive details

  ```javascript
  // ✅ DO: Create proper audit logs with masked PII
  await AuditLogger.createLog({
    userId,
    action: 'profile_submit',
    details: {
      email: profileData.email,
      licenseNumber: profileData.licenseNumber ? 'PRESENT' : 'MISSING'
    },
    sensitiveFields: {
      email: true,
      licenseNumber: true
    }
  }, supabase);
  
  // ❌ DON'T: Log sensitive data directly
  console.log(`User ${userId} submitted profile with SIN: ${profileData.sinNumber}`);
  ```

## Security Middleware

- **TLS Enforcement**
  - All production traffic must use TLS 1.3
  - HSTS headers are automatically applied in production

- **Rate Limiting**
  - Global rate limiting: 100 requests per 15 minutes per IP
  - Sensitive operations: 5 requests per hour per IP
  - Apply stricter limits to authentication and verification endpoints

- **CSRF Protection**
  - Required for all data-changing operations (POST, PUT, PATCH, DELETE)
  - Must set secure, httpOnly, SameSite cookies

- **Input Sanitization**
  - All user input must be sanitized before processing
  - Apply the sanitizeInputs middleware to routes with user input

- **Request Tracking**
  - All requests get a unique identifier for traceability
  - Include request ID in error responses for debugging

## API Security

- **Authentication**
  - All profile-related endpoints must be protected with authenticateToken
  - Verify appropriate permissions for admin/recruiter operations
  - Apply appropriate rate limiting based on operation sensitivity

- **Response Security**
  - Never return sensitive data in responses
  - Convert snake_case database fields to camelCase for API responses
  - Decrypt sensitive fields only when absolutely necessary

## Data Validation

- **Required Field Validation**
  - Validate all required fields server-side before storing
  - Implement business logic validation (e.g., license OR passport required)
  - Return clear validation error messages

## User Session Security

- **Session Timeout**
  - Implement automatic session expiration after 30 minutes of inactivity
  - Force re-authentication for sensitive operations

## Migration Guide

When implementing new security features or routes:

1. Apply authenticateToken middleware to ALL routes that access user data
2. Add appropriate rate limiting based on endpoint sensitivity
3. Implement CSRF protection for all data-changing operations
4. Use the encryption utility for all PII fields
5. Create audit logs for all sensitive operations
6. Apply input sanitization to all user inputs
7. Add proper validation for all required fields
8. Return appropriate HTTP status codes and clear error messages 